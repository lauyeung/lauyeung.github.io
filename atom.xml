<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tearin' it up]]></title>
  <link href="http://lauyeung.github.io/atom.xml" rel="self"/>
  <link href="http://lauyeung.github.io/"/>
  <updated>2013-10-14T17:46:24-04:00</updated>
  <id>http://lauyeung.github.io/</id>
  <author>
    <name><![CDATA[Louise Au Yeung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beginner Vim Commands]]></title>
    <link href="http://lauyeung.github.io/blog/2013/10/14/beginner-vim-commands/"/>
    <updated>2013-10-14T15:08:00-04:00</updated>
    <id>http://lauyeung.github.io/blog/2013/10/14/beginner-vim-commands</id>
    <content type="html"><![CDATA[<p>I&rsquo;m new to <a href="http://www.vim.org/">Vim</a> but I&rsquo;ve been using <a href="http://www.sublimetext.com/">Sublime Text</a> in vintage mode to practice. I&rsquo;ve tried a few tutorials but I&rsquo;ve found it more helpful to actually learn by using the commands while coding.</p>

<p>I wanted to share my starter set of commands and I hope I remember to add blog posts as I add to my repetoire.</p>

<table>
  <th><strong>Shortcut</strong></th>
  <tr>
    <td>gg</td>
    <td>go to the top</td>
  </tr>
  <tr>
    <td>G</td>
    <td>go to the bottom</td>
  </tr>
  <tr>
    <td>i</td>
    <td>insert (puts cursor before marker location)</td>
  </tr>
  <tr>
    <td>a</td>
    <td>append (puts cursor after marker location)</td>
  </tr>
  <tr>
    <td>x</td>
    <td>deletes character above the cursor</td>
  </tr>
  <tr>
    <td>X</td>
    <td>deletes character before the cursor</td>
  </tr>
  <tr>
    <td>D</td>
    <td>delete from cursor to end of the line</td>
  </tr>
  <tr>
    <td>dd</td>
    <td>deletes a row</td>
  </tr>
  <tr>
    <td>diw</td>
    <td>deletes a word</td>
  </tr>
  <tr>
    <td>ciw</td>
    <td>deletes a word and goes to insert mode</td>
  </tr>
</table>


<br>


<p><strong>How to cut/copy and paste:</strong><br>
1. v (or V for whole lines) to highlight what you want to cut or copy<br>
2. d (for cut), y (for copy)<br>
3. p to paste after cursor (P for before the cursor)<br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ternary operators to store sessions in Rails]]></title>
    <link href="http://lauyeung.github.io/blog/2013/09/24/ternary-operators/"/>
    <updated>2013-09-24T12:09:00-04:00</updated>
    <id>http://lauyeung.github.io/blog/2013/09/24/ternary-operators</id>
    <content type="html"><![CDATA[<p>Recently at <a href="http://www.launchacademy.com/">Launch Academy</a>, we learnt about sessions and cookies as a means to store data between requests. Using the <code>session</code> hash in Rails means we can persist data.</p>

<p>In our example, we stored a registration id to the <code>session</code> hash in the create controller action so that we could access it in subsequent visits to the new page. Since there isn&rsquo;t always necessarily a <code>session</code> available, we needed to make sure we wouldn&rsquo;t encouter exceptions when looking for the last <code>session</code>.</p>

<p>Here are a 3 methods I tried:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># GET /registrations/new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Method 1</span>
</span><span class='line'><span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>  <span class="c1"># Use find_by_id to try and locate a Registration with the last registration id</span>
</span><span class='line'>  <span class="c1"># Using find_by_id instead of find since find_by_id returns nil when not found</span>
</span><span class='line'>  <span class="c1"># (find throws an exception)</span>
</span><span class='line'>  <span class="vi">@last_registration</span> <span class="o">=</span> <span class="no">Registration</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:last_registration_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@registration</span> <span class="o">=</span> <span class="no">Registration</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Sets the registration email as the last registration email if it exists</span>
</span><span class='line'>  <span class="c1"># (prepopulating the form would happen in the view)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@last_registration</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="vi">@registration</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="vi">@last_registration</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Method 2</span>
</span><span class='line'><span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>  <span class="c1"># Looks for last registration the same way as method 1</span>
</span><span class='line'>  <span class="vi">@last_registration</span> <span class="o">=</span> <span class="no">Registration</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:last_registration_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@registration</span> <span class="o">=</span> <span class="no">Registration</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Instead of using an if statement, use .try to pull the last registration email address</span>
</span><span class='line'>  <span class="c1"># (results in nil instead of throwing an error if last registration email doesn&#39;t exist)</span>
</span><span class='line'>  <span class="vi">@registration</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="vi">@last_registration</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Method 3</span>
</span><span class='line'><span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>  <span class="c1"># Here comes the ternary operator (condition ? if_true : if_false)</span>
</span><span class='line'>  <span class="c1"># Use ternary operator to check if there is a session last registration id and</span>
</span><span class='line'>  <span class="c1"># if there is, the last registration email is set to that</span>
</span><span class='line'>  <span class="c1"># If there is no last registration id, last registration email is set to a blank string</span>
</span><span class='line'>  <span class="vi">@last_registration_email</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:last_registration_id</span><span class="o">]</span> <span class="p">?</span> <span class="no">Registration</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:last_registration_id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">email</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="vi">@registration</span> <span class="o">=</span> <span class="no">Registration</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last method is definitely the most concise&mdash;and I think pretty expressive too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pairing]]></title>
    <link href="http://lauyeung.github.io/blog/2013/09/21/pairing/"/>
    <updated>2013-09-21T12:30:00-04:00</updated>
    <id>http://lauyeung.github.io/blog/2013/09/21/pairing</id>
    <content type="html"><![CDATA[<p>The more I pair program, the more I enjoy it. It&rsquo;s very much like sharing the platform with a buddy. Here are a few pros I&rsquo;ve found:</p>

<p><strong>Pacing</strong>: Sharing the platform makes it easier to time when you should be lifting &ndash; it&rsquo;s much easier to prevent your breaks between sets from being too short or too long. Similarly, pair programming can helps pace yourself&mdash;having someone to code with means that you can talk through your thought process as you work.</p>

<p><strong>Staying Focused</strong>: Having a friend can keep you from getting distracted and keep you on task and in the zone.</p>

<p><strong>Share the Knowledge</strong>: I always learn something new from my partner. Whether it&rsquo;s a lifehack, computer shortcut, or a tip for just doing it better. It&rsquo;s always an educational experience to work with someone.</p>

<p>Pairing can be very uncomfortable at because it requires you try to accommodate someone else&rsquo;s working style and having someone watch you work, but there are some definite benefits. And as with a lot of things, practice helps! Looking forward to more pairing in my life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First!]]></title>
    <link href="http://lauyeung.github.io/blog/2013/08/31/first/"/>
    <updated>2013-08-31T16:39:00-04:00</updated>
    <id>http://lauyeung.github.io/blog/2013/08/31/first</id>
    <content type="html"><![CDATA[<p>Humble beginnings! Here&rsquo;s a first post.</p>
]]></content>
  </entry>
  
</feed>
