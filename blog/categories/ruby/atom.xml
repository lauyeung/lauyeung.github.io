<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | tearin' it up]]></title>
  <link href="http://lauyeung.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://lauyeung.github.io/"/>
  <updated>2014-04-30T22:03:00-04:00</updated>
  <id>http://lauyeung.github.io/</id>
  <author>
    <name><![CDATA[Louise Au Yeung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using ternary operators to store sessions in Rails]]></title>
    <link href="http://lauyeung.github.io/blog/2013/09/24/ternary-operators/"/>
    <updated>2013-09-24T12:09:00-04:00</updated>
    <id>http://lauyeung.github.io/blog/2013/09/24/ternary-operators</id>
    <content type="html"><![CDATA[<p>Recently at <a href="http://www.launchacademy.com/">Launch Academy</a>, we learnt about sessions and cookies as a means to store data between requests. Using the <code>session</code> hash in Rails means we can persist data.</p>

<p>In our example, we stored a registration id to the <code>session</code> hash in the create controller action so that we could access it in subsequent visits to the new page. Since there isn&rsquo;t always necessarily a <code>session</code> available, we needed to make sure we wouldn&rsquo;t encouter exceptions when looking for the last <code>session</code>.</p>

<p>Here are a 3 methods I tried:
```ruby</p>

<h1>GET /registrations/new</h1>

<h1>Method 1</h1>

<p>def new
  # Use find_by_id to try and locate a Registration with the last registration id
  # Using find_by_id instead of find since find_by_id returns nil when not found
  # (find throws an exception)
  @last_registration = Registration.find_by_id(session[:last_registration_id])
  @registration = Registration.new</p>

<p>  # Sets the registration email as the last registration email if it exists
  # (prepopulating the form would happen in the view)
  if @last_registration.present?</p>

<pre><code>@registration.email = @last_registration.email
</code></pre>

<p>  end
end</p>

<h1>Method 2</h1>

<p>def new
  # Looks for last registration the same way as method 1
  @last_registration = Registration.find_by_id(session[:last_registration_id])
  @registration = Registration.new</p>

<p>  # Instead of using an if statement, use .try to pull the last registration email address
  # (results in nil instead of throwing an error if last registration email doesn&rsquo;t exist)
  @registration.email = @last_registration.try(:email)
end</p>

<h1>Method 3</h1>

<p>def new
  # Here comes the ternary operator (condition ? if_true : if_false)
  # Use ternary operator to check if there is a session last registration id and
  # if there is, the last registration email is set to that
  # If there is no last registration id, last registration email is set to a blank string
  @last_registration_email = session[:last_registration_id] ? Registration.find_by_id(session[:last_registration_id]).email : &lsquo;&rsquo;
  @registration = Registration.new
end
```</p>

<p>The last method is definitely the most concise&mdash;and I think pretty expressive too.</p>
]]></content>
  </entry>
  
</feed>
